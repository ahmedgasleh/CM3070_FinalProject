@inject IConfiguration _configuration;



@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<div id="content" class="container-fluid">
    <div class="col-12 px-2">
        <div class="card">
            <div class="card-body">

                <div class="d-flex flex-row">
                    <div class="input-group mb-3">
                        <input class="form-control bg-warning bg-opacity-10" name="txtHealthNumber" type="text" id="txtHealthNumber" tabindex="0" />
                        <button class="btn btn-outline-primary" type="button" id="btnHealthNumber" onclick="GetPatient(); return;">...</button>
                    </div>
                </div>              

            </div>

        </div>

    </div>
    <div class="row g-1 py-2 px-2">
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="tab-0" data-bs-toggle="tab" href="#tbInbox" role="tab" aria-controls="tbInbox" aria-selected="true">Inbox</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link " id="tab-1" data-bs-toggle="tab" href="#tbChart" role="tab" aria-controls="tbChart" aria-selected="true" onclick="GetChartDetail(); return;" >Chart</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="tab-2" data-bs-toggle="tab" href="#tbPrescription" role="tab" 
            aria-controls="tbPrescription" aria-selected="true" onclick="GetPrescriptions(); return;">Prescription</a>
        </li>
        

    </ul>
    <div class="tab-content pt-5" id="tab-content">

        <div class="tab-pane px-2 active" id="tbInbox" role="tabpanel" aria-labelledby="tbInbox">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="card">
                        <div class="card-body bg-success bg-opacity-10">
                            <div class="row g-1 py-2">
                                <div class="col-12 h-100">
                                    <div id="tableInbox" class="table-responsive overflow-hidden">
                                        <table id="inboxTable" class="table table-hover table-bordered" width="100%"
                                               cellspacing="0">
                                            <thead>
                                                <tr id="InboxHeadings"> </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">

                            <div id="emailDetail"></div>

                        </div>

                    </div>
                </div>

            </div>

            
        </div>
        <div class="tab-pane px-2" id="tbChart" role="tabpanel" aria-labelledby="tab-0">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="row g-1 py-2">
                        <div class="col-12">
                            <div class="d-flex flex-row">                                
                                <div class="px-4">
                                    <button class="btn btn-outline-primary " id="prev">Previous</button>
                                </div>

                                <button class="btn btn-outline-primary" id="next">Next</button>
                                <div class="px-2">
                                    <span> Page: <span id="page_num"></span> / <span id="page_count"></span> </span>
                                </div>

                            </div>
                            <div class="py-4">
                                <canvas id="pdf-canvas2"></canvas>
                            </div>
                           
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="tab-pane px-2" id="tbPrescription" role="tabpanel" aria-labelledby="tbPrescription">

            <div class="col-12 px-2">
                <div class="card bg-warning bg-opacity-10">
                    <div class="card-body">
                        <div class="row g-1 py-2">
                            <div class="col-12">
                            </div>

                        </div>
                    </div>
                </div>
                <div class="card py-2">
                    <div class="card-body">
                        <div id="prescriptionDetail">

                        </div>
                    </div>
                </div>
            </div>            
        </div>
    </div>

</div>

</div>
<script src="~/pdf.js/pdf.mjs" type="module" asp-append-version="true"></script>
<script src="~/js/loadpdffile.js"></script>
@section Scripts{

    <script type="text/javascript">

        var APIUrl = '@_configuration["App:APIUrl"]';

        window.addEventListener("DOMContentLoaded", (event) => {
            console.log("loaded")

            getMailTapContent();
        })

        function LoadPdfDocument(url) {
            pdfjs_load("data/" + url, 'pdf-canvas');
        }

        function GetPatient() {

            let patientNumber = $('#txtHealthNumber').val();

            GetThisPatient(patientNumber)

        }

        async function GetThisPatient(pid) {

            console.log("GetPatient", APIUrl, pid);

            const response = await fetch(APIUrl + "GetDemographic/" + pid, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {

                    console.log("result:", response)

                    if (response.demographic_no === 0) {
                        //ClearPatientFormData();
                    }
                    else {
                        LoadPatientFormData(response, pid);
                        
                    }
                })
        }

        function LoadPatientFormData(patient, id) {

            let dob = patient.year_of_birth + "/" + patient.month_of_birth + "/" + patient.date_of_birth;

            SetDivElementText("textCurrentSubjectId", patient.demographic_no)
            SetDivElementText("textCurrentSubjectHIN", patient.hin)

            SetDivElementText("textCurrentSubject", patient.last_name + ", " + patient.first_name + " " + dob);
        }

        async function GetPrescriptions() {

            let id = GetElementValueAtribute('textCurrentSubjectId');

            const response = await fetch("/Api/DataFetch/GetPrescriptionDetail", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json;charset=UTF-8",
                }),
                body: JSON.stringify({ "Id": id })
            })
                .then(response => response.text())
                .then(response => {

                    LoadPrescriptionDetail(response);                   
               })
        }

        async function GetChartDetail() {

            const response = await fetch(APIUrl + "GetChart/&id=" + 1, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {

                    console.log("result:", response)

                    LoadChartDetail(response);
                
                    //loadMailItems(response, document.getElementById("inboxTable"))
                })
        }

        async function getMailTapContent(){

            console.log("getMailTapContent");

            const response = await fetch(APIUrl + "GetMail/" + 0, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {

                    //console.log("result:", response)

                    loadMailItems(response, document.getElementById("inboxTable"))
                })

        }

        function loadMailItems(data, table){

            console.log("loadMailItems", data, table);

            const tableHead = table.querySelector("thead");
            const tableBody = table.querySelector("tbody");

            //clear table
            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.querySelector("tr").appendChild(createHeaders("ID", "ColId", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Provider #", "ColProvider", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Received Date", "ColReceivedCDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Priority Id", "ColPriorityDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Attached", "ColAttached", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Message", "ColMessage", ["tblColumn"]))

            for (let i = 0; i < data.length; i++) {

                console.log("item", data[i])
                const rowElement = document.createElement("tr");
                rowElement.setAttribute("id", "Id" + data[i].id);
                rowElement.appendChild(createCell(data[i].id));
                rowElement.appendChild(createCell(data[i].provider_no));
                rowElement.appendChild(createCell(data[i].received_date));
                rowElement.appendChild(createCell(data[i].priority_id));
                rowElement.appendChild(createCell(data[i].attachment));
                rowElement.appendChild(createCell(data[i].message));
                rowElement.appendChild(createButtonCellFunc("Load", "LoadEmailDetail(" + data[i].id + ")"));

                tableBody.appendChild(rowElement);

                $('#emailDetail').html("");
            
            }
            
        }

        async function LoadEmailDetail(id) {

            console.log("LoadEmailDetail", id);

            const response = await fetch("/Api/DataFetch/GetMailDetail", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json;charset=UTF-8",
                }),
                body: JSON.stringify({ "Id": id })
            })
                .then(response => response.text() )
                .then(response => {

                    console.log("result:", response)
                    LoadDetail(response);
                    
                })

        }

        async function LoadDetail(data) {     

            $('#emailDetail').html(data);
        }


        async function LoadPrescriptionDetail(data) {

            $('#prescriptionDetail').html(data);
        }

        async function LoadChartDetail(data) {

            pdfjs_load("data/Patient/" + data.demographic_no + "/" + data.docfilename, 'pdf-canvas2');
        }

        
    </script>
}

