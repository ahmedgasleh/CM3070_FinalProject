@inject IConfiguration _configuration;

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var eventColor = new Dictionary<string, string>() { { "#378006", "Visit" }, { "#86D1FC", "Follow" }, { "#EBE134", "Unknown" } };
}

<div class="container-fluid px-5 py-5" id='calendar-container'>
    <div class="mb-4" id='calendar'></div>
    <div class="px-4"></div>
</div>

<link href='~/fullcalendar/packages/core/main.css' rel='stylesheet' />
<link href='~/fullcalendar/packages/daygrid/main.css' rel='stylesheet' />

<script src="~/fullcalendar/packages/core/main.js"></script>
<script src="~/fullcalendar/packages/interaction/main.js"></script>
<script src="~/fullcalendar/packages/daygrid/main.js"></script>
<script src="~/fullcalendar/packages/timegrid/main.js"></script>
<script src="~/fullcalendar/packages/list/main.js"></script>



@section Scripts{
    <script type="text/javascript">

        var APIUrl = '@_configuration["App:APIUrl"]';

        document.addEventListener('DOMContentLoaded', function () {

            GetCalenderEvents();        
        
        });

        async function GetCalenderEvents() {

            console.log("API", APIUrl);

            const response = await fetch(APIUrl + "GetSchedule", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {

                    console.log("result:", response)

                    LoadCalendar(response);

                })
        }

        function LoadCalendar(data) {

            console.log("calender is loaded", data);

            var calendarEl = document.getElementById('calendar');

            var calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: ['interaction', 'dayGrid', 'timeGrid', 'list'],
                height: 'parent',
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
                },
                defaultView: 'dayGridMonth',
                defaultDate: Date.now(),
                height: 'parent',
                navLinks: true, // can click day/week names to navigate views
                editable: true,
                eventLimit: true, // allow "more" link when too many events
                events: data,
               
                eventClick: function (info) {
                    info.jsEvent.preventDefault(); // don't let the browser navigate

                    if (info.event.url) {
                        const functionName = info.event.url;
                        eval(functionName);
                    }
                }
            });

            calendar.render();

        }

        async function LoadEventDetail(id) {
            console.log("Load Event Detail", id);

            const response = await fetch(APIUrl + "GetScheduleEvent/" + id, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {

                    console.log("result:", response)

                    LoadSchaduleEventPopUp(response);

                })

           
        }

        function LoadSchaduleEventPopUp(data) {
            console.log("data", data);
        }

     </script>
}