@inject IConfiguration _configuration;

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


<div width="100%" class="px-5">
    
    <div class="container-fluid d-flex flex col-12 px-1 py-1" id='subjectHomeContainer'>
        <div class="col-2">
            <div class="card">
                <div class="card-body" >
                    @* <div id="homeTree"></div> *@
                    <div class="py-2">
                        <button class="btn btn-success w-100" onclick="GetHomeTask(); return;" id="btnTasks"> Tasks </button>
                    </div>
                    <div class="py-2">
                        <button class="btn btn-success w-100" onclick="GetHomeDocuments(); return;"> Documents </button>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-10 px-2">
            <div class="card">
                <div class="card-body">
                    <div class="card">
                        <div class="card-body" style="height: 20%">                            
                            <table id="homeListDetail" class="table table-hover table-bordered" width="100%" cellspacing="0">
                                <thead>
                                    <tr id="PendingHeadings"> </tr>
                                </thead>
                                <tbody></tbody>
                            </table>                       
                        </div>
                    </div>
                    <div class="card py-2">
                        <div class="card-body">
                            

                            <div id="taskDetail"> 
                                @* <div class="d-flex flex-row">

                                    <label class="col-form-label"> Patient </label>
                                    <label class="col-form-label px-5" type="text" id="pname"> A Omer </label>
                                    <label class="col-form-label px-2" > Created </label>
                                    <label class="col-form-label" type="text" id="createdBy"> BD</label>
                                </div>

                                <div class="d-flex flex-row">
                                    <label class="col-form-label"> Due Date </label>
                                    <label class="col-form-label px-5" id="dueDate"> 2024-07-08T09:13:00</label>
                                    <label class="col-form-label"> Priority </label>
                                    <label class="col-form-label" id="priority"> Normal</label>
                                </div>
                                <label class="col-form-label"> Notes </label>
                                <textarea class="form-control bg-warning bg-opacity-10" id="notes" rows="10"> Lab result arrived call for visit</textarea> *@
                            </div>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/pdf.js/pdf.mjs" type="module" asp-append-version="true"></script>

@section Scripts{
    <script type="text/javascript">
        var APIUrl = '@_configuration["App:APIUrl"]';

        console.log("Api", APIUrl);

        function LoadPdfDocument(fileName) {

            let url = "data/" + fileName;
            console.log(url);

            pdfjs_load(url)
        }

        function pdfjs_load(url) {


            //var url = 'data/1_b7efc663-cd5c-4d28-a134-aab7b7646601_Falzata-Michael-(04-March-2022).pdf';



            console.log("Workerload: ", url)

            // Loaded via <script> tag, create shortcut to access PDF.js exports.
            var { pdfjsLib } = globalThis;

            // The workerSrc property shall be specified.

            pdfjsLib.GlobalWorkerOptions.workerSrc = 'pdf.js/pdf.worker.mjs';

            // if (AfterSlash === "" || AfterSlash === null || AfterSlash === undefined) {
            //     pdfjsLib.GlobalWorkerOptions.workerSrc = 'pdf.js/pdf.worker.mjs';
            // }
            // else {
            //     let moduleFolder = AfterSlash.concat('/', 'pdf.js/pdf.worker.mjs');
            //     console.log("module folder", moduleFolder);
            //     pdfjsLib.GlobalWorkerOptions.workerSrc = moduleFolder;
            //     //url = AfterSlash.concat("/", url);

            // }


            var pdfDoc = null,
                pageNum = 1,
                pageRendering = false,
                pageNumPending = null,
                scale = 2,
                canvas = document.getElementById('pdf-canvas'),
                ctx = canvas.getContext('2d');

            /**
             * Get page info from document, resize canvas accordingly, and render page.
             * param num Page number.
             */
            function renderPage(num) {
                pageRendering = true;
                // Using promise to fetch the page
                pdfDoc.getPage(num).then(function (page) {
                    var viewport = page.getViewport({ scale: scale });
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    // Render PDF page into canvas context
                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                    };
                    var renderTask = page.render(renderContext);

                    // Wait for rendering to finish
                    renderTask.promise.then(function () {
                        pageRendering = false;
                        if (pageNumPending !== null) {
                            // New page rendering is pending
                            renderPage(pageNumPending);
                            pageNumPending = null;
                        }
                    });
                });

                // Update page counters
                document.getElementById('page_num').textContent = num;
            }

            /**
             * If another page rendering in progress, waits until the rendering is
             * finised. Otherwise, executes rendering immediately.
             */
            function queueRenderPage(num) {
                if (pageRendering) {
                    pageNumPending = num;
                } else {
                    renderPage(num);
                }
            }

            /**
             * Displays previous page.
             */
            function onPrevPage() {
                if (pageNum <= 1) {
                    return;
                }
                pageNum--;
                queueRenderPage(pageNum);
            }
            document.getElementById('prev').addEventListener('click', onPrevPage);

            /**
             * Displays next page.
             */
            function onNextPage() {
                if (pageNum >= pdfDoc.numPages) {
                    return;
                }
                pageNum++;
                queueRenderPage(pageNum);
            }
            document.getElementById('next').addEventListener('click', onNextPage);

            /**
             * Asynchronously downloads PDF.
             */

            pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('page_count').textContent = pdfDoc.numPages;

                // Initial/first page rendering
                renderPage(pageNum);
            });

        }

        window.addEventListener("DOMContentLoaded", (event) => {

            console.log("Doc Loaded");
            //GetHomeTree();
            GetHomeTask();
        })



        async function GetHomeTree() {

            const response = await fetch(APIUrl + "GetHomeTree", {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
            .then(response => response.json())
            .then(response => {               

                LoadHomeTree(response, "#homeTree");

            })
        }

        async function GetHomeTask() {

            console.log("GetHomeTask");
            const response = await fetch(APIUrl + "GetHomeTask/" + 0, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {


                    loadHomeTask(response, document.getElementById("homeListDetail"));
                })
        }

        async function GetHomeDocuments(){

            console.log("GetHomeDocuments");

            const response = await fetch(APIUrl + "GetHomeDocuments", {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {


                    loadHomeDocuments(response, document.getElementById("homeListDetail"));
                })

        }

        function loadHomeTask(data, table) {

            const tableHead = table.querySelector("thead");
            const tableBody = table.querySelector("tbody");

            
            console.log("ldTable", data)

            //clear table
            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.querySelector("tr").appendChild(createHeaders("ID", "ColId", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Name", "ColName", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created Date", "ColCDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Due Date", "ColDDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created By", "ColCBy", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Reason", "ColReason", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Priority", "ColPriority", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Notes", "ColPriority", ["tblColumn"]))

            for (let i = 0; i < data.length; i++) {

                const rowElement = document.createElement("tr");

                rowElement.setAttribute("id", "Id" + data[i].demographic_no);
                //rowElement.classList.add("Row");
                rowElement.appendChild(createCell(data[i].id));
                rowElement.appendChild(createCell(data[i].demographic_no));
                rowElement.appendChild(createCell(data[i].created_date));
                rowElement.appendChild(createCell(data[i].due_date));
                rowElement.appendChild(createCell(data[i].created_by));
                rowElement.appendChild(createCell(data[i].reason));
                rowElement.appendChild(createCell(data[i].priority_id));
                rowElement.appendChild(createCell(data[i].notes));
                rowElement.appendChild(createButtonCellFunc("Load", "LoadTaskDetail(" + data[i].id + ")"));

                tableBody.appendChild(rowElement);
            }

            $('#taskDetail').html("");
        }

        function loadHomeDocuments(data, table){

            const tableHead = table.querySelector("thead");
            const tableBody = table.querySelector("tbody");


            console.log("ldTable", data)

            //clear table
            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.querySelector("tr").appendChild(createHeaders("ID", "ColId", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Type", "ColType", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("File Name", "ColFileName", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created By", "ColCreated", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Responsible", "ColResponsible", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Status", "ColStatus", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Content", "ColPriority", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Updtaded Date", "ColUDate", ["tblColumn"]))

            for (let i = 0; i < data.length; i++) {

                const rowElement = document.createElement("tr");

                rowElement.setAttribute("id", "Id" + data[i].document_no);
                //rowElement.classList.add("Row");
                rowElement.appendChild(createCell(data[i].document_no));
                rowElement.appendChild(createCell(data[i].doctype));
                rowElement.appendChild(createCell(data[i].docfilename));
                rowElement.appendChild(createCell(data[i].doccreator));
                rowElement.appendChild(createCell(data[i].responsible));
                rowElement.appendChild(createCell(data[i].status));
                rowElement.appendChild(createCell(data[i].contenttype));
                rowElement.appendChild(createCell(data[i].updatedatetime));
                rowElement.appendChild(createButtonCellFunc("Load", "LoadDocumentDetail(" + data[i].document_no + ")"));

                tableBody.appendChild(rowElement);
            }


            $('#taskDetail').html("");

           

        }
        async function LoadDocumentDetail(id) {
            console.log("loadDocDetail", id);

            console.log("GetHomeTask");
            const response = await fetch("/Api/DataFetch/GetDecumentDetails", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json;charset=UTF-8",
                }),
                body: JSON.stringify({ "id": id })
            })
                .then(response => response.text())
                .then(response => {


                    loadDocumentDetail(response);
                })
        }

        function loadDocumentDetail(data) {

            console.log("docDetail", data)

            // SetDivElementText("pname", data[0].demographic_no);
            // SetDivElementText("createdBy", data[0].created_by);
            // SetDivElementText("dueDate", data[0].due_date);
            // SetDivElementText("priory", data[0].priority_id);
            // SetDivElementText("notes", data[0].notes);

            $('#taskDetail').html(data);

        }

        async function LoadTaskDetail(id) {
            console.log("loadTaskDetail", id);

            console.log("GetHomeTask");
            const response = await fetch("/Api/DataFetch/GetTaskDetails", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json;charset=UTF-8",
                }),
                body: JSON.stringify({"id": id})
            })
            .then(response => response.text())
            .then(response => {
                loadHomeTaskDetail(response);
            })
        }

        function loadHomeTaskDetail(data) {

             console.log("taskDetail", data)

            // SetDivElementText("pname", data[0].demographic_no);
            // SetDivElementText("createdBy", data[0].created_by);
            // SetDivElementText("dueDate", data[0].due_date);
            // SetDivElementText("priory", data[0].priority_id);
            // SetDivElementText("notes", data[0].notes);

            $('#taskDetail').html(data);

        }

        function LoadHomeTree(data, id) {

            console.log("TreeData", id, data);

            $(id).bstreeview({
                data: data,
                expandIcon: 'fa fa-angle-down fa-fw',
                collapseIcon: 'fa fa-angle-right fa-fw',
                indent: 1.25,
                parentsMarginLeft: '1.25rem',
                openNodeLinkOnNewTab: false
            });


        }

    
    </script>
}
