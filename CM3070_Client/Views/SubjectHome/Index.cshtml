@inject IConfiguration _configuration;

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<div width="100%" class="px-5">
    
    <div class="container-fluid d-flex flex col-12 px-1 py-1" id='subjectHomeContainer'>
        <div class="col-2">
            <div class="card">
                <div class="card-body" >
                    @* <div id="homeTree"></div> *@
                    <div class="py-2">
                        <button class="btn btn-success w-100" onclick="GetHomeTask(); return;" id="btnTasks"> Tasks </button>
                    </div>
                    <div class="py-2">
                        <button class="btn btn-success w-100" onclick="GetHomeDocuments(); return;"> Documents </button>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-10 px-2">
            <div class="card">
                <div class="card-body">
                    <div class="card">
                        <div class="card-body" style="height: 20%">                            
                            <table id="homeListDetail" class="table table-hover table-bordered" width="100%" cellspacing="0">
                                <thead>
                                    <tr id="PendingHeadings"> </tr>
                                </thead>
                                <tbody></tbody>
                            </table>                       
                        </div>
                    </div>
                    <div class="card py-2">
                        <div class="card-body">
                            <div id="taskStatus"> </div>

                            <div id="taskDetail"> </div>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var APIUrl = '@_configuration["App:APIUrl"]';

        console.log("Api", APIUrl);

        window.addEventListener("DOMContentLoaded", (event) => {

            console.log("Doc Loaded");
            //GetHomeTree();
            GetHomeTask();
        })



        async function GetHomeTree() {

            const response = await fetch(APIUrl + "GetHomeTree", {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
            .then(response => response.json())
            .then(response => {               

                LoadHomeTree(response, "#homeTree");

            })
        }

        async function GetHomeTask() {

            console.log("GetHomeTask");
            const response = await fetch(APIUrl + "GetHomeTask/" + 0, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {


                    loadHomeTask(response, document.getElementById("homeListDetail"));
                })
        }

        async function GetHomeDocuments(){

            console.log("GetHomeDocuments");

            const response = await fetch(APIUrl + "GetHomeDocuments", {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                })
            })
                .then(response => response.json())
                .then(response => {


                    loadHomeDocuments(response, document.getElementById("homeListDetail"));
                })

        }

        function loadHomeTask(data, table) {

            const tableHead = table.querySelector("thead");
            const tableBody = table.querySelector("tbody");

            
            console.log("ldTable", data)

            //clear table
            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.querySelector("tr").appendChild(createHeaders("ID", "ColId", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Name", "ColName", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created Date", "ColCDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Due Date", "ColDDate", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created By", "ColCBy", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Reason", "ColReason", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Priority", "ColPriority", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Notes", "ColPriority", ["tblColumn"]))

            for (let i = 0; i < data.length; i++) {

                const rowElement = document.createElement("tr");

                rowElement.setAttribute("id", "Id" + data[i].demographic_no);
                //rowElement.classList.add("Row");
                rowElement.appendChild(createCell(data[i].id));
                rowElement.appendChild(createCell(data[i].demographic_no));
                rowElement.appendChild(createCell(data[i].created_date));
                rowElement.appendChild(createCell(data[i].due_date));
                rowElement.appendChild(createCell(data[i].created_by));
                rowElement.appendChild(createCell(data[i].reason));
                rowElement.appendChild(createCell(data[i].priority_id));
                rowElement.appendChild(createCell(data[i].notes));
                rowElement.appendChild(createButtonCellFunc("Load", "LoadTaskDetail(" + data[i].id + ")"));

                tableBody.appendChild(rowElement);
            }
        }

        function loadHomeDocuments(data, table){

            const tableHead = table.querySelector("thead");
            const tableBody = table.querySelector("tbody");


            console.log("ldTable", data)

            //clear table
            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.innerHTML = "<tr></tr>"
            tableBody.innerHTML = "";

            tableHead.querySelector("tr").appendChild(createHeaders("ID", "ColId", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Type", "ColType", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("File Name", "ColFileName", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Created By", "ColCreated", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Responsible", "ColResponsible", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Status", "ColStatus", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Content", "ColPriority", ["tblColumn"]))
            tableHead.querySelector("tr").appendChild(createHeaders("Updtaded Date", "ColUDate", ["tblColumn"]))

            for (let i = 0; i < data.length; i++) {

                const rowElement = document.createElement("tr");

                rowElement.setAttribute("id", "Id" + data[i].document_no);
                //rowElement.classList.add("Row");
                rowElement.appendChild(createCell(data[i].document_no));
                rowElement.appendChild(createCell(data[i].doctype));
                rowElement.appendChild(createCell(data[i].docfilename));
                rowElement.appendChild(createCell(data[i].doccreator));
                rowElement.appendChild(createCell(data[i].responsible));
                rowElement.appendChild(createCell(data[i].status));
                rowElement.appendChild(createCell(data[i].contenttype));
                rowElement.appendChild(createCell(data[i].updatedatetime));
                rowElement.appendChild(createButtonCellFunc("Load", "LoadDocumentDetail(" + data[i].document_no + ")"));

                tableBody.appendChild(rowElement);
            }


        }
        async function LoadDocumentDetail(id) {
            console.log("loadDocDetail", id);

            console.log("GetHomeTask");
            const response = await fetch("/Api/DataFetch/GetDocumentDetail", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/x-www-form-urlencoded",
                }),
                body: JSON.stringify({ "id": id })
            })
                .then(response => response.text())
                .then(response => {


                    loadDocumentDetail(response);
                })
        }

        function loadDocumentDetail(data) {

            console.log("docDetail", data)

            // SetDivElementText("pname", data[0].demographic_no);
            // SetDivElementText("createdBy", data[0].created_by);
            // SetDivElementText("dueDate", data[0].due_date);
            // SetDivElementText("priory", data[0].priority_id);
            // SetDivElementText("notes", data[0].notes);

            $('taskDetail').html(data);

        }

        async function LoadTaskDetail(id) {
            console.log("loadTaskDetail", id);

            console.log("GetHomeTask");
            const response = await fetch("/Api/DataFetch/GetTaskDetail", {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json;charset=UTF-8",
                }),
                body: JSON.stringify({ "id": id })
            })
            .then(response => response.text())
            .then(response => {


                loadHomeTaskDetail(response);
            })
        }

        function loadHomeTaskDetail(data) {

            // console.log("taskDetail", data)

            // SetDivElementText("pname", data[0].demographic_no);
            // SetDivElementText("createdBy", data[0].created_by);
            // SetDivElementText("dueDate", data[0].due_date);
            // SetDivElementText("priory", data[0].priority_id);
            // SetDivElementText("notes", data[0].notes);

            $('taskDetail').html(data);

        }

        function LoadHomeTree(data, id) {

            console.log("TreeData", id, data);

            $(id).bstreeview({
                data: data,
                expandIcon: 'fa fa-angle-down fa-fw',
                collapseIcon: 'fa fa-angle-right fa-fw',
                indent: 1.25,
                parentsMarginLeft: '1.25rem',
                openNodeLinkOnNewTab: false
            });


        }

    
    </script>
}
